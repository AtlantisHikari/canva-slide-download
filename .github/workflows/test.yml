# GitHub Actions CI/CD Pipeline for Testing
# CanvaÁ∞°Â†±‰∏ãËºâÁ≥ªÁµ±Ëá™ÂãïÂåñÊ∏¨Ë©¶ÊµÅÁ®ã

name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run nightly tests at 2 AM UTC
    - cron: '0 2 * * *'

# Allow manual trigger
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of tests to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - unit
          - integration
          - e2e
          - performance
          - security
      environment:
        description: 'Environment to test against'
        required: true
        default: 'test'
        type: choice
        options:
          - test
          - staging
          - production

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'
  
# Concurrency control
concurrency:
  group: test-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Code Quality and Linting
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript check
        run: npm run type-check

      - name: Run Prettier check
        run: npx prettier --check .

      - name: Check for security vulnerabilities
        run: npm audit --audit-level moderate

  # Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: quality
    
    strategy:
      matrix:
        node-version: [18, 20]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:unit
        env:
          NODE_ENV: test
          CI: true

      - name: Generate coverage report
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unit
          name: unit-tests-node-${{ matrix.node-version }}

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-results-node-${{ matrix.node-version }}
          path: |
            coverage/
            test-results/
          retention-days: 7

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: unit-tests
    
    services:
      chrome:
        image: browserless/chrome:latest
        ports:
          - 3000:3000
        env:
          CHROME_REFRESH_TIME: 600000
          DEFAULT_BLOCK_ADS: true
          DEFAULT_STEALTH: true
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Start application server
        run: |
          npm run build
          npm run start &
          sleep 30
        env:
          NODE_ENV: test
          PORT: 3001

      - name: Wait for server to be ready
        run: |
          npx wait-on http://localhost:3001 --timeout 60000

      - name: Run integration tests
        run: npm run test:integration
        env:
          NODE_ENV: test
          TEST_URL: http://localhost:3001
          CHROME_URL: ws://localhost:3000

      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: |
            test-results/
            screenshots/
          retention-days: 7

  # End-to-End Tests
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 45
    needs: integration-tests
    
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps ${{ matrix.browser }}

      - name: Build application
        run: npm run build

      - name: Start application server
        run: |
          npm run start &
          sleep 30
        env:
          NODE_ENV: test
          PORT: 3001

      - name: Wait for server to be ready
        run: npx wait-on http://localhost:3001 --timeout 60000

      - name: Run E2E tests
        run: npx playwright test --project=${{ matrix.browser }}
        env:
          BASE_URL: http://localhost:3001
          CI: true

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results-${{ matrix.browser }}
          path: |
            playwright-report/
            test-results/
          retention-days: 7

      - name: Upload screenshots on failure
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: e2e-screenshots-${{ matrix.browser }}
          path: test-results/**/*.png
          retention-days: 7

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: unit-tests
    if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && (github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'performance'))
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install performance testing tools
        run: |
          npm install -g artillery@latest
          npm install -g k6

      - name: Build application
        run: npm run build

      - name: Start application server
        run: |
          npm run start &
          sleep 30
        env:
          NODE_ENV: production
          PORT: 3001

      - name: Wait for server to be ready
        run: npx wait-on http://localhost:3001 --timeout 60000

      - name: Run load tests
        run: npm run test:performance
        env:
          TARGET_URL: http://localhost:3001

      - name: Run memory leak tests
        run: npm run test:memory
        timeout-minutes: 30

      - name: Generate performance report
        run: npm run test:performance:report

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-test-results
          path: |
            performance-results/
            memory-reports/
          retention-days: 30

      - name: Comment performance results on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = './performance-results/summary.json';
            if (fs.existsSync(path)) {
              const results = JSON.parse(fs.readFileSync(path, 'utf8'));
              const comment = `## Performance Test Results üìä
              
              | Metric | Current | Baseline | Change |
              |--------|---------|----------|--------|
              | Avg Response Time | ${results.avgResponseTime}ms | ${results.baselineResponseTime}ms | ${results.responseTimeChange} |
              | Memory Usage | ${results.peakMemory}MB | ${results.baselineMemory}MB | ${results.memoryChange} |
              | Error Rate | ${results.errorRate}% | ${results.baselineErrorRate}% | ${results.errorRateChange} |
              
              ${results.summary}`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }

  # Security Tests
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: unit-tests
    if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && (github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'security'))
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level moderate

      - name: Run OWASP dependency check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'canva-slide-download'
          path: '.'
          format: 'ALL'

      - name: Build application
        run: npm run build

      - name: Start application server
        run: |
          npm run start &
          sleep 30
        env:
          NODE_ENV: test
          PORT: 3001

      - name: Run security tests
        run: npm run test:security
        env:
          TARGET_URL: http://localhost:3001

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-test-results
          path: |
            security-results/
            reports/
          retention-days: 30

      - name: Upload OWASP results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: owasp-dependency-check
          path: reports/
          retention-days: 30

  # Test Results Analysis
  test-analysis:
    name: Test Results Analysis
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests]
    if: always()
    
    steps:
      - name: Download all test artifacts
        uses: actions/download-artifact@v4
        with:
          path: test-artifacts/

      - name: Analyze test results
        run: |
          echo "Test Results Summary:" > test-summary.md
          echo "===================" >> test-summary.md
          
          # Count test files
          find test-artifacts/ -name "*.xml" -o -name "*.json" | wc -l > total-tests.txt
          echo "Total test result files: $(cat total-tests.txt)" >> test-summary.md
          
          # Check for failures
          if find test-artifacts/ -name "*failure*" -o -name "*error*" | grep -q .; then
            echo "‚ùå Some tests failed" >> test-summary.md
          else
            echo "‚úÖ All tests passed" >> test-summary.md
          fi

      - name: Upload test summary
        uses: actions/upload-artifact@v4
        with:
          name: test-summary
          path: test-summary.md
          retention-days: 30

  # Deployment Gate
  deployment-gate:
    name: Deployment Gate
    runs-on: ubuntu-latest
    needs: [quality, unit-tests, integration-tests, e2e-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Check all tests passed
        run: |
          echo "All required tests have passed successfully"
          echo "System is ready for deployment"

      - name: Create deployment-ready tag
        if: success()
        run: |
          echo "DEPLOYMENT_READY=true" >> $GITHUB_ENV
          echo "DEPLOY_VERSION=$(date +%Y%m%d-%H%M%S)-${GITHUB_SHA:0:8}" >> $GITHUB_ENV

      - name: Update deployment status
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: context.payload.deployment?.id || 0,
              state: 'success',
              description: 'All tests passed - ready for deployment',
              environment: 'production'
            });

  # Notification
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [deployment-gate, test-analysis]
    if: always() && (github.event_name == 'schedule' || github.ref == 'refs/heads/main')
    
    steps:
      - name: Notify on success
        if: needs.deployment-gate.result == 'success'
        run: |
          echo "‚úÖ All tests passed successfully"
          echo "üöÄ System ready for deployment"

      - name: Notify on failure
        if: needs.deployment-gate.result == 'failure' || needs.test-analysis.result == 'failure'
        run: |
          echo "‚ùå Some tests failed"
          echo "üõë Deployment blocked"

# Cleanup
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [notify]
    if: always()
    
    steps:
      - name: Clean up old artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId,
            });
            
            const oldArtifacts = artifacts.data.artifacts.filter(artifact => {
              const created = new Date(artifact.created_at);
              const weekAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);
              return created < weekAgo;
            });
            
            for (const artifact of oldArtifacts) {
              await github.rest.actions.deleteArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id,
              });
            }